4th principle -> Strive for loosely coupled design between objects that interact.
-> Never depend on the order of evaluation of the Observer notifications. If we are depending, then that's for sure not loosely coupled.
-> The dark side of the java.util.Observable
--> observable is a class, so you can only subclass it. It's not an interface.
--> observable protects crucial methods
Observer pattern -> defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.